{"version":3,"sources":["components/Countries.jsx","GraphQL/Queries.js","App.jsx","index.js"],"names":["Countries","countriesList","useState","countryInfo","setCountryInfo","useQuery","data","loading","error","className","countries","map","country","onClick","newCountryInfo","capital","currency","handleClick","name","code","gql","App","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"oPA4DeA,G,MAnDG,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACDC,mBAAS,MADR,mBAChCC,EADgC,KACnBC,EADmB,OAENC,mBAASJ,GAAlCK,EAF+B,EAE/BA,KAAMC,EAFyB,EAEzBA,QAASC,EAFgB,EAEhBA,MAEvB,GAAID,EACF,OAAO,mBAAGE,UAAU,UAAb,sDAGT,GAAID,EACF,OAAO,mBAAGC,UAAU,QAAb,sBAYT,OACE,qCACGH,GACC,oBAAIG,UAAU,YAAd,SACGH,EAAKI,UAAUC,KAAI,SAAAC,GAAO,OACzB,oBACEC,QAAS,kBAfD,SAACD,GACnB,IAAME,EAAiB,CACrBC,QAASH,EAAQG,QACjBC,SAAUJ,EAAQI,UAGpBZ,EAAeU,GASUG,CAAYL,IAE3BH,UAAU,qBAHZ,SAKGG,EAAQM,MAHJN,EAAQO,WASpBhB,GACC,sBAAKM,UAAU,kBAAf,UACE,mBAAGA,UAAU,qBAAb,4BACeN,EAAYY,WAE3B,mBAAGN,UAAU,sBAAb,6BACgBN,EAAYa,oB,wKClD/B,IAAMN,EAAYU,cAAH,KCGTC,EAAM,kBACjB,8BACE,cAAC,EAAD,CAAWpB,cAAeS,OCAxBY,EAAS,IAAIC,eAAa,CAC9BC,IAAK,qCACLC,MAAO,IAAIC,kBAGbC,IAASC,OACP,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.915582d1.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable no-unused-vars */\n/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport './countries.scss';\n\nconst Countries = ({ countriesList }) => {\n  const [countryInfo, setCountryInfo] = useState(null);\n  const { data, loading, error } = useQuery(countriesList);\n\n  if (loading) {\n    return <p className=\"loading\">Loading... Please wait, or try to reload</p>;\n  }\n\n  if (error) {\n    return <p className=\"error\">Error :(</p>;\n  }\n\n  const handleClick = (country) => {\n    const newCountryInfo = {\n      capital: country.capital,\n      currency: country.currency,\n    };\n\n    setCountryInfo(newCountryInfo);\n  };\n\n  return (\n    <>\n      {data && (\n        <ul className=\"countries\">\n          {data.countries.map(country => (\n            <li\n              onClick={() => handleClick(country)}\n              key={country.code}\n              className=\"countries__country\"\n            >\n              {country.name}\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {countryInfo && (\n        <div className=\"countries__info\">\n          <p className=\"countries__capital\">\n            {`Capital: ${countryInfo.capital}`}\n          </p>\n          <p className=\"countries__currency\">\n            {`Currency: ${countryInfo.currency}`}\n          </p>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Countries;\n","import { gql } from '@apollo/client';\n\nexport const countries = gql`\n  {\n    countries {\n      name\n      code\n      capital\n      currency\n    }\n  }\n`;\n","import React from 'react';\nimport './App.scss';\nimport Countries from './components/Countries';\nimport { countries } from './GraphQL/Queries';\n\nexport const App = () => (\n  <div>\n    <Countries countriesList={countries} />\n  </div>\n);\n","/* eslint-disable max-len */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport './index.css';\nimport { App } from './App';\n\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com',\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}